/*!
 * Express - Form
 * Copyright(c) 2010 Dan Dean <me@dandean.com>
 * MIT Licensed
 */

var utils = require("./utils")
  , Field = require("./field");

function form() {
  // form fileds
  var routines = Array.prototype.slice.call(arguments)
    , options = form._options;
  
  return function (req, res, next) {
    // var map = {};
    var flashed = {};
    var mergedSource = {};
    
    if (!req.form) req.form = {};
    
    // 将 body, query, params 的所有键值对全部合并到 mergedSource
    options.dataSources.forEach(function (source) {
      utils.merge(mergedSource, req[source]);
    });
    
    // 将所有的参数键值对赋予 req.form
    if (options.passThrough) req.form = utils.clone(mergedSource);
    
    // 将所有的 res.body 的内容插入到 res.locals 中
    if (options.autoLocals) {
      for (var prop in req.body) {
        if (!req.body.hasOwnProperty(prop)) continue;
        
        if (!res.locals) res.locals = {};
        res.locals[utils.camelize(prop)] = req.body[prop];
      }
    }
    
    // 定义 form 的属性
    Object.defineProperties(req.form, {
      "errors": {
        value: [],
        enumerable: false
      },
      "errorsMap": {
        value: {},
        enumerable: false
      },
      "getErrors": {
        value: function (name) {
          if(!name) return this.errorsMap;
          
          return this.errorsMap[name] || [];
        },
        enumerable: false
      },
      "pushError": {
        value: function (name, error) {
          this.errors.push(error);
          this.errorsMap[name] = this.errorsMap[name] || []
          this.errorsMap[name].push(error);
          return;
        }
      },
      "isValid": {
        get: function () {
          return this.errors.length === 0;
        },
        enumerable: false
      },
      // 将错误插入到 Express 的 req.flash 中
      "flashErrors": {
        value: function () {
          if (typeof req.flash !== "function") return;
          this.errors.forEach(function (error) {
            if (flashed[error]) return;
            
            flashed[error] = true;
            req.flash("error", error);
          });
        },
        enumerable: false
      }
    });
    
    // 现在才开始查错
    routines.forEach(function (routine) {
      var result = routine.run(mergedSource, req.form, options);
      
      if (!Array.isArray(result) || !result.length) return;
        
      var errors = req.form.errors = req.form.errors || []
        , name = routine.name;

      var errorsMap = req.form.errorsMap;
      errorsMap[name] = errorsMap[name] || [];
      
      // map[name] = map[name] || [];
      
      result.forEach(function (error) {
        errors.push(error);
        // added by hustlzp
        errorsMap[name].push(error);
        // map[name].push(error);
      });
    });
    
    if (options.flashErrors) req.form.flashErrors();
    
    if (next) next();
  }
}

form.field = function (property, label) {
  return new Field(property, label);
};

form.filter = form.validate = form.field;

form._options = {
  dataSources: ["body", "query", "params"],
  autoTrim: false,
  autoLocals: true,
  passThrough: false,
  flashErrors: true
};

// configure form
form.configure = function (options) {
  for (var p in options) {
    // 下面的代码是当dataSources参数仅为一个时
    // 将其转换成array，以方便后续操作
    if (!Array.isArray(options[p]) && p === "dataSources") {
      options[p] = [options[p]];
    }
    this._options[p] = options[p];
  }
  return this;
}

module.exports = form;